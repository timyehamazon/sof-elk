# SOF-ELKÂ® Configuration File
# (C)2020 Pierre Lidome and Arjun Bhardwaj
#         SOF-ELK integrations by Lewes Technology Consulting, LLC
#
# Postprocessing for logs from Office 365

filter {
  if [type] == "office365" {
    # using ruby code to get the total number of field count ---- TESTING ----
    #
    # The IF condition will check if the start of the message is with a date value.
    # This is to accomodate the output file with creation time as the first column
    # date-first format is from web-based log extraction
    if [message] =~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}T/ {
      csv {
        #skip_header => "true"
        skip_empty_rows => "true"
        columns => [ "CreationDate", "UserIds", "Operations", "AuditData" ]
      }

    # computername-first format is from powershell extraction
    } else {
      csv {
        #skip_header => "true"
        skip_empty_rows => "true"
        columns => [ "PSComputerName", "RunspaceId", "PSShowComputerName", "RecordType", "CreationDate", "UserIds", "Operations", "AuditData", "ResultIndex", "ResultCount", "Identity", "IsValid", "ObjectState" ]
      }
    }

    # drop rows that are just the headers
    # the third conditional is needed because we're stuck with a hanging "else" above which catches the headers from the web-based log extraction pattern
    if [CreationDate] == "CreationDate" or [PSComputerName] == "PSComputerName" or [PSComputerName] == "CreationDate" {
      drop{}
    }

    # Need to parse out embedded JSON
    # since there is no "target =>" assignment, all fields will drop to the root node
    json {
      source => "AuditData"
      remove_field => "AuditData"
    }

    # matching the timestamp to the time of the event occurence
    date {
      match => [ "[CreationTime]", "ISO8601" ]
    }

    # matching source IP from the field ClientIP
    if [ClientIP] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => {
          "[ClientIP]" => [ "\[?%{IP:client_ip}\]?(?::%{INT:client_port})?" ]
        }
      }
    }
    # matching against ClientIPAddress or ActorIpAddress
    if [ClientIPAddress] or [ActorIpAddress] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => {
          "[ClientIPAddress]" => [ "\[?%{IP:source_ip}\]?(?::%{INT:source_port})?" ]
          "[ActorIpAddress]" => [ "\[?%{IP:source_ip}\]?(?::%{INT:source_port})?" ]
        }
      }
    }
    mutate {
      remove_field => [ "ClientIP", "ClientIPAddress", "ActorIpAddress" ]
    }

    # Break out the Parameters into their Name:Value assignments
    if [Parameters] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[Parameters]"
          "destination_field" => "[Parameters]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }

    # Break out the OperationProperties into their Name:Value assignments
    if [OperationProperties] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[OperationProperties]"
          "destination_field" => "[OperationProperties]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }

    # Break out the ExtendedProperties into their Name:Value assignments
    if [ExtendedProperties] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[ExtendedProperties]"
          "destination_field" => "[ExtendedProperties]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }

    # Splitting the array of JSON objects in ExtendedProperties and then extracting the fields "name" & "value"
    if [ExtendedProperties][UserAgent] {
      mutate {
        rename => {
          "[ExtendedProperties][UserAgent]" => "useragent"
        }
      }
    }

    # Break out the DeviceProperties into their Name:Value assignments
    if [DeviceProperties] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[DeviceProperties]"
          "destination_field" => "[DeviceProperties]"
          "key_field" => "Name"
          "val_field" => "Value"
        }
      }
    }

    # mass field renaming
    # for some reason, this behaves erratically unless the fields are listed alphabetically
    # PJH: Need to validate: Id (name), SupportTicketId (format)
    mutate {
      rename => {
        "Actor" => "actor"
        "ActorContextId" => "actor_context_guid"
        "AffectedItems" => "affected_items"
        "AlertEntityId" => "alert_entity"
        "AlertId" => "alert_guid"
        "AlertLinks" => "alert_links"
        "AlertType" => "alert_type"
        "AppId" => "app_id"
        "ApplicationId" => "application_guid"
        "AzureActiveDirectoryEventType" => "azure_active_directory_event_type"
        "Category" => "category"
        "ClientAppId" => "client_app_id"
        "ClientInfoString" => "client_info_string"
        "ClientProcessName" => "process_name"
        "ClientVersion" => "client_version"
        "CmdletVersion" => "cmdlet_version"
        "Comments" => "comments"
        "CommunicationType" => "communication_type"
        "CrossMailboxOperation" => "cross_mailbox_operation"
        "Data" => "data"
        "DestFolder" => "destination_folder"
        "EntityType" => "entity_type"
        "ExternalAccess" => "external_access"
        "Folder" => "folder"
        "Folders" => "folders"
        "Id" => "report_guid"
        "Identity" => "identity"
        "InterSystemsId" => "inter_systems_guid"
        "InternalLogonType" => "internal_logon_type"
        "IntraSystemId" => "intra_system_guid"
        "IsValid" => "is_valid"
        "Item" => "item"
        "ItemName" => "item_name"
        "LogonError" => "logon_error"
        "LogonType" => "logon_type"
        "LogonUserSid" => "logon_user_sid"
        "MailboxGuid" => "mailbox_guid"
        "MailboxOwnerSid" => "mailbox_owner_sid"
        "MailboxOwnerUPN" => "mailbox_owner_upn"
        "Members" => "members"
        "ModifiedProperties" => "modified_properties"
        "Name" => "name"
        "ObjectId" => "object_id"
        "ObjectName" => "object_name"
        "ObjectState" => "object_state"
        "Operation" => "operation"
        "OperationCount" => "operation_count"
        "OperationProperties" => "operation_properties"
        "Operations" => "operations"
        "OrganizationId" => "organization_guid"
        "OrganizationName" => "organization_name"
        "OriginatingServer" => "originating_server"
        "PSComputerName" => "ps_computer_name"
        "PSShowComputerName" => "ps_show_computer_name"
        "Parameters" => "parameters"
        "ParentFolder" => "parent_folder"
        "PolicyId" => "policy_guid"
        "RecordType" => "record_type"
        "ResultCount" => "result_count"
        "ResultIndex" => "result_index"
        "ResultStatus" => "result_status"
        "RunspaceId" => "runspace_guid"
        "SessionId" => "session_guid"
        "Severity" => "severity"
        "SkypeForBusinessEventType" => "skype_for_business_event_type"
        "Source" => "source"
        "Status" => "status"
        "SupportTicketId" => "support_ticket_id"
        "Target" => "target"
        "TargetContextId" => "target_context_guid"
        "TeamGuid" => "team_guid"
        "TeamName" => "team_name"
        "TenantName" => "tenant_name"
        "UserId" => "user_name"
        "UserIds" => "user_ids"
        "UserKey" => "user_key"
        "UserType" => "user_type"
        "Version" => "version"
        "Workload" => "workload"
      }
    }

    # remove unnessary fields
    mutate {
      remove_field => [ "ExtendedProperties", "CreationDate", "CreationTime", "message" ]
    }    
  }
}

